import { human_number, parse_float_input } from "../../utils/number";
import dynamic from "next/dynamic";
import { ProfitSharingType } from "./types";
import { ProfitShareInputType } from "../../../pages/types/game-settings";
import styles from "./ProfitSharing.module.scss";
import {
  addProfitShare,
  profitSharingCompleted,
} from "../../utils/game-settings";

const Input = dynamic(() => import("../../input"));
const Button = dynamic(() => import("../../button"));
const Icon = dynamic(() => import("../../icon"));
const Modal = dynamic(() => import("../../modal"));

export default function ProfitSharing({
  systemConfig,
  settings,
  errors,
  handleUpdateSettings,
  showModal,
  modals,
  setModals,
}: ProfitSharingType) {
  const handleUpdateProfitSharing = (
    key: number,
    field: string,
    value: any
  ): ProfitShareInputType[] => {
    let profitSharing = settings.profitSharing;
    //@ts-ignore
    profitSharing[key][field] = value;
    return profitSharing;
  };

  return (
    <div className={styles.default}>
      <h2>
        Profit sharing{" "}
        {!profitSharingCompleted(settings.profitSharing) ? (
          <Button
            onClick={() =>
              addProfitShare(settings.profitSharing, handleUpdateSettings)
            }
          >
            +
          </Button>
        ) : (
          ""
        )}
      </h2>

      <fieldset>
        <p>
          Defines which wallets will receive the profits of the game. Note that
          100% of the shares represents the profits generated by the{" "}
          <strong>{settings.fee}%</strong> game fee defined above.
        </p>
        <ul>
          {settings.profitSharing.map(
            (item: ProfitShareInputType, k: number) => (
              <li key={`ps-${k}`}>
                <span>
                  {item.treasury
                    ? `${item.treasury.slice(0, 4)}...${item.treasury.slice(
                        item.treasury.length - 4,
                        item.treasury.length
                      )}`
                    : "__________"}{" "}
                  -&gt; {item.share}%
                  {item.treasury === systemConfig?.treasury.toBase58() ? (
                    <Icon
                      cType="info"
                      onClick={() =>
                        showModal(
                          <div>
                            <h3>Service fee</h3>
                            <p>
                              {`The program keeps ${human_number(
                                systemConfig.profitFee / 100,
                                2
                              )}% of the total pot as a service fee, which corresponds to the ${human_number(
                                systemConfig.profitFee / settings.fee,
                                2
                              )}% of the defined game fee: ${settings.fee}%`}
                            </p>
                          </div>
                        )
                      }
                    />
                  ) : (
                    ""
                  )}
                </span>
                <Button
                  onClick={() => setModals({ ...modals, [`mps-${k}`]: true })}
                >
                  Edit
                </Button>
                <Button
                  onClick={() =>
                    handleUpdateSettings(
                      "profitSharing",
                      settings.profitSharing.filter(
                        (_: ProfitShareInputType, index: number) => index !== k
                      )
                    )
                  }
                >
                  -
                </Button>
                <Modal
                  modalId={`mps-${k}`}
                  modals={modals}
                  setIsOpen={setModals}
                >
                  <div>
                    <Input
                      type="text"
                      name={`ps-treasury${k}`}
                      placeholder="Solana Public Key"
                      value={item.treasury}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                        handleUpdateSettings(
                          "profitSharing",
                          handleUpdateProfitSharing(
                            k,
                            "treasury",
                            e.target.value
                          )
                        )
                      }
                    />{" "}
                    -&gt;{" "}
                    <Input
                      width={50}
                      type="text"
                      name={`ps-share${k}`}
                      value={item.share}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                        handleUpdateSettings(
                          "profitSharing",
                          handleUpdateProfitSharing(
                            k,
                            "share",
                            parse_float_input(e.target.value, 0)
                          )
                        )
                      }
                    />
                    {errors.hasOwnProperty("profitSharing") ? (
                      <div>{errors["profitSharing"]}</div>
                    ) : (
                      ""
                    )}
                    <Button
                      onClick={() =>
                        setModals({ ...modals, [`mps-${k}`]: false })
                      }
                    >
                      Close
                    </Button>
                  </div>
                </Modal>
              </li>
            )
          )}
        </ul>
        {errors.hasOwnProperty("profitSharing") ? errors["profitSharing"] : ""}
      </fieldset>
    </div>
  );
}
