import type { NextPage } from "next";
import Head from "next/head";
import styles from "../../styles/Admin.module.scss";
import { useWallet, useConnection } from "@solana/wallet-adapter-react";
import {
  flashError,
  flashMsg,
  is_authorized,
} from "../../components/utils/helpers";
import { useEffect, useState } from "react";
import Router from "next/router";
import { PublicKey } from "@solana/web3.js";
import {
  config_pda,
  fetch_pdas,
  initSolanaProgram,
  lamports_to_sol,
  PDATypes,
  SolanaProgramType,
  solana_fiat_price,
  solana_to_usd,
  StatsType,
  stats_pda,
  SystemConfigType,
  SYSTEM_AUTHORITY,
  system_config_pda,
} from "@cubist-collective/cubist-games-lib";
import dynamic from "next/dynamic";
import { ConfigInputType } from "../../types/game-settings";
import { fetch_configs } from "../../components/utils/game-settings";
import { AnimatePresence, motion } from "framer-motion";
import Spinner from "../../components/spinner";
import { DEFAULT_ANIMATION } from "../../components/utils/animation";
import { human_number } from "../../components/utils/number";
import IDL from "@cubist-collective/cubist-games-lib/lib/idl.json";

const AdminWelcome = dynamic(() => import("../../components/admin-welcome"));
const Button = dynamic(() => import("../../components/button"));
const Icon = dynamic(() => import("../../components/icon"));
const ReactTooltip = dynamic(() => import("react-tooltip"), { ssr: false });

const AdminHome: NextPage = () => {
  const { connection } = useConnection();
  const { publicKey, wallet } = useWallet();
  const [pdas, setPdas] = useState<PDATypes | null>(null);
  const [solFiatPrice, setSolFiatPrice] = useState<number | null>(null);
  const [systemConfig, setSystemConfig] = useState<SystemConfigType | null>(
    null
  );
  const [config, setConfig] = useState<ConfigInputType | null>(null);
  const [stats, setStats] = useState<StatsType | null>(null);
  const [authority, _setAuthority] = useState<PublicKey>(
    new PublicKey(process.env.NEXT_PUBLIC_AUTHORITY as string)
  );
  const [solanaProgram, setSolanaProgram] = useState<SolanaProgramType | null>(
    null
  );

  // STEP 1 - Init Program and PDAs
  useEffect(() => {
    if (!is_authorized(publicKey) || !wallet || solanaProgram || pdas) return;

    if (!is_authorized(publicKey)) {
      Router.push("/unauthorized");
      return;
    }
    (async () => {
      setSolFiatPrice(await solana_fiat_price());
      setPdas(
        await flashError(fetch_pdas, [
          ["systemConfig", system_config_pda, SYSTEM_AUTHORITY],
          ["config", config_pda, authority],
          ["stats", stats_pda, authority],
        ])
      );
      setSolanaProgram(
        await initSolanaProgram(IDL, connection, wallet.adapter)
      );
    })();
  }, [publicKey, wallet, connection, solanaProgram, authority, pdas]);

  // STEP 2 - Fetch Configs
  useEffect(() => {
    if (!solanaProgram || !pdas || systemConfig) return;
    (async () => {
      if (
        !(await fetch_configs(
          config as ConfigInputType,
          solanaProgram,
          pdas,
          setSystemConfig,
          setConfig,
          setStats,
          9
        ))
      ) {
        flashMsg("You need to define the default game settings first");
        Router.push("/admin/global-settings");
      }
    })();
  }, [solanaProgram, pdas, config, systemConfig]);

  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href={process.env.NEXT_PUBLIC_FAVICON} />
      </Head>
      {!publicKey ? (
        <AdminWelcome />
      ) : (
        <div className={`vhAligned  ${styles.content}`}>
          <section>
            <div>
              <h1 className={styles.title}>DASHBOARD</h1>
              <ul>
                <li>
                  <p>Default configuration for new games</p>
                  <Button>
                    <a href="admin/global-settings">Global settings</a>
                  </Button>
                </li>
                <li>
                  <p>Edit existing games</p>{" "}
                  <Button>
                    <a href="admin/games">Manage Games</a>
                  </Button>
                </li>
                <li>
                  <p>Create a new game</p>
                  <Button>
                    <a href="admin/game">New Game</a>
                  </Button>
                </li>
              </ul>
            </div>
          </section>
          <section>
            <div>
              <h2>Global stats</h2>
              {!stats ? (
                <Spinner />
              ) : (
                <AnimatePresence>
                  <motion.div className={styles.stats} {...DEFAULT_ANIMATION}>
                    <div>
                      <h3>
                        Total profits:{" "}
                        <span
                          data-for="profitsTooltip"
                          data-tip={
                            !!solFiatPrice &&
                            `${solana_to_usd(
                              lamports_to_sol(stats.totalSolProfits.toNumber()),
                              solFiatPrice as number
                            )} USD`
                          }
                        >
                          {human_number(stats.totalSolProfits.toNumber(), 2)}{" "}
                          SOL
                          <Icon cType="info" className="icon1" />
                        </span>
                      </h3>
                      <ReactTooltip
                        id="profitsTooltip"
                        globalEventOff="click"
                      />
                    </div>
                    <div>
                      <h3>
                        Total games: <span>{stats.totalGames.toNumber()}</span>
                      </h3>
                    </div>
                  </motion.div>
                </AnimatePresence>
              )}
            </div>
          </section>
        </div>
      )}
    </>
  );
};

export default AdminHome;
