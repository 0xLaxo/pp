import type { NextPage } from "next";
import Head from "next/head";
import styles from "../../styles/Admin.module.scss";
import { useWallet, useConnection } from "@solana/wallet-adapter-react";
import { flashError, is_authorized } from "../../components/utils/helpers";
import { useEffect, useState } from "react";
import { PublicKey } from "@solana/web3.js";
import {
  config_pda,
  fetch_pdas,
  initSolanaProgram,
  PDATypes,
  SolanaProgramType,
  stats_pda,
  SYSTEM_AUTHORITY,
  system_config_pda,
} from "@cubist-collective/cubist-games-lib";
import useSWR from "swr";
import { fetcher } from "../../components/utils/requests";

const AdminHome: NextPage = () => {
  const { data } = useSWR("/api/idl", fetcher);
  const { connection } = useConnection();
  const { publicKey, wallet } = useWallet();
  const [pdas, setPdas] = useState<PDATypes | null>(null);
  const [authority, _setAuthority] = useState<PublicKey>(
    new PublicKey(process.env.NEXT_PUBLIC_AUTHORITY as string)
  );
  const [solanaProgram, setSolanaProgram] = useState<SolanaProgramType | null>(
    null
  );

  // STEP 1 - Init Program and PDAs
  useEffect(() => {
    if (!is_authorized(publicKey) || !wallet || solanaProgram || !data || pdas)
      return;
    (async () => {
      setPdas(
        await flashError(fetch_pdas, [
          ["systemConfig", system_config_pda, SYSTEM_AUTHORITY],
          ["config", config_pda, authority],
          ["stats", stats_pda, authority],
        ])
      );
      setSolanaProgram(
        await initSolanaProgram(JSON.parse(data), connection, wallet.adapter)
      );
    })();
  }, [publicKey, wallet, connection, data, solanaProgram, authority, pdas]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {!is_authorized(publicKey) ? (
        <main className={styles.main}>Not authorized</main>
      ) : (
        <main className={styles.main}>
          <h1 className={styles.title}>Admin site</h1>
          <div className={styles.grid}>
            <a href="admin/global-settings" className={styles.card}>
              <h2>Settings &rarr;</h2>
              <p>Default configuration for games.</p>
            </a>
          </div>
          <div className={styles.grid}>
            <a href="admin/game" className={styles.card}>
              <h2>New Game</h2>
              <p>Create a new game.</p>
            </a>
          </div>
          <div className={styles.grid}>
            <a href="admin/games" className={styles.card}>
              <h2>Manage Games</h2>
              <p>Edit existing games.</p>
            </a>
          </div>
        </main>
      )}
    </div>
  );
};

export default AdminHome;
